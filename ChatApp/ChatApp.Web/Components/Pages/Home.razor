@page "/"
@using ChatApp.Web.Data
@using ChatApp.Web.ViewModels
@using Microsoft.AspNetCore.Identity
@rendermode InteractiveServer

<PageTitle>Chat App</PageTitle>

<AuthorizeView>
     <Authorized>
          <div class="chat-app">
               <ChatList OnUserSelected="SetCurrentChatUser" Users="ChatUsers" />
               <div class="chat-app__main">
                    <ChatWindow CurrentUser="@CurrentUser" CurrentChatUser="@CurrentChatUser" IsOnline="true" />
               </div>
               <div class="chat-app__sidebar">
                    <UserSidebar CurrentChatUserVM="@SelectedChatUser" ChatMessages="@CurrentChatMessages" />
               </div>
          </div>
     </Authorized>
     <NotAuthorized>
          <div class="login-prompt">
               <h3>You must be logged in to use the chat.</h3>
               <a href="/account/login">Go to Login</a>
          </div>
     </NotAuthorized>
</AuthorizeView>

@code {
     [Inject] private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
     [Inject] private UserManager<ApplicationUser> UserManager { get; set; } = default!;
     [Inject] private ApplicationDbContext DbContext { get; set; } = default!;

     private string CurrentUser { get; set; } = null!;
     private string CurrentChatUser { get; set; } = null!;
     private List<ChatUserVM> ChatUsers { get; set; } = new();
     private List<ChatMessage> CurrentChatMessages { get; set; } = new();
     private ChatUserVM? SelectedChatUser => ChatUsers.FirstOrDefault(u => u.Name == CurrentChatUser);

     protected override async Task OnInitializedAsync()
     {
          var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
          var user = authState.User;
          if (user.Identity?.IsAuthenticated == true)
          {
               CurrentUser = user.Identity.Name ?? "Unknown";
          }
          else
          {
               CurrentUser = "Unknown";
          }

          // Load all users except the current user
          var dbUsers = UserManager.Users.ToList();
          ChatUsers = new List<ChatUserVM>();

          foreach (var u in dbUsers)
          {
               if (u.UserName == CurrentUser)
                    continue;

               var lastMsg = DbContext.Messages
                   .Where(m =>
                       (m.SenderId == CurrentUser && m.ReceiverId == u.UserName) ||
                       (m.SenderId == u.UserName && m.ReceiverId == CurrentUser))
                   .OrderByDescending(m => m.Timestamp)
                   .FirstOrDefault();

               string lastMessageText = lastMsg?.Content ?? "";
               string timeAgo = lastMsg != null ? GetTimeAgo(lastMsg.Timestamp) : "";

               ChatUsers.Add(new ChatUserVM
               {
                    Name = u.UserName ?? "",
                    LastMessage = lastMessageText,
                    TimeAgo = timeAgo,
                    AvatarUrl = "/images/no-profile.png",
                    IsOnline = false
               });
          }

          // Set the first user as the default chat user
          if (ChatUsers.Any())
          {
               CurrentChatUser = ChatUsers.First().Name;
               await LoadCurrentChatMessages();
          }
     }

     private void SetCurrentChatUser(string userName)
     {
          CurrentChatUser = userName;
          LoadCurrentChatMessages().GetAwaiter().GetResult();
     }

     private async Task LoadCurrentChatMessages()
     {
          if (!string.IsNullOrEmpty(CurrentUser) && !string.IsNullOrEmpty(CurrentChatUser))
          {
               CurrentChatMessages = DbContext.Messages
                   .Where(m => (m.SenderId == CurrentUser && m.ReceiverId == CurrentChatUser) ||
                               (m.SenderId == CurrentChatUser && m.ReceiverId == CurrentUser))
                   .OrderBy(m => m.Timestamp)
                   .Select(m => new ChatMessage
                   {
                        Id = m.Id.ToString(),
                        Sender = m.SenderId,
                        Receiver = m.ReceiverId,
                        Content = m.Content,
                        Timestamp = m.Timestamp,
                        IsRead = m.IsRead,
                        ImageUrl = m.ImageUrl,
                        FileUrl = m.FileUrl,
                        FileName = m.FileName
                   })
                   .ToList();
          }
          else
          {
               CurrentChatMessages = new List<ChatMessage>();
          }
     }

     private string GetTimeAgo(DateTime timestamp)
     {
          var span = DateTime.UtcNow - timestamp;
          if (span.TotalMinutes < 1)
               return "just now";
          if (span.TotalMinutes < 60)
               return $"{(int)span.TotalMinutes} min ago";
          if (span.TotalHours < 24)
               return $"{(int)span.TotalHours} hour{(span.TotalHours >= 2 ? "s" : "")} ago";
          return timestamp.ToLocalTime().ToString("yyyy-MM-dd HH:mm");
     }
}