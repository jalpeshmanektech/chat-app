@rendermode InteractiveServer
@using ChatApp.Web.Hubs
@using ChatApp.Web.Services
@implements IAsyncDisposable

<div class="chat-window">
    <div class="chat-header">
        <div class="chat-header__info">
            <div class="avatar">
                <img src="/images/no-profile.png" alt="User avatar" />
            </div>
            <div class="user-info">
                <div class="user-info__name">@CurrentChatUser</div>
                <div class="user-info__status">
                    @if (IsTyping)
                    {
                        <span class="text-primary">Typing...</span>
                    }
                    else if (IsOnline)
                    {
                        <span class="text-success">Online</span>
                    }
                    else
                    {
                        <span class="text-secondary">Offline</span>
                    }
                </div>
            </div>
        </div>
    </div>
    
    <div class="chat-messages" @ref="messagesContainer">
        @if (Messages.Count == 0)
        {
            <div class="empty-state">
                <div class="empty-state-icon">ðŸ’¬</div>
                <div class="empty-state-title">No messages yet</div>
                <div class="empty-state-description">Start a conversation by sending a message!</div>
            </div>
        }
        else
        {
            @foreach (var msg in Messages)
            {
                <div class="message @(msg.Sender == CurrentUser ? "sent" : "received")">
                    @if (msg.Sender != CurrentUser)
                    {
                        <div class="message__avatar">
                            <img src="/images/no-profile.png" alt="Avatar" />
                        </div>
                    }
                    <div class="">
                        <div class="@(msg.Sender == CurrentUser ? "message-bubble--sender" : "message-bubble")">
                             @if (!string.IsNullOrEmpty(msg.FileUrl))
                             {
                                  <img src="@msg.FileUrl" alt="Attachment" class="message__image" />
                             }
                             @if (!string.IsNullOrEmpty(msg.Content))
                             {
                                  <div>@msg.Content</div>
                             }
                        </div>
                        <div class="message__time">
                            @msg.Timestamp.ToString("HH:mm")
                            @if (msg.Sender == CurrentUser)
                            {
                                <span class="message__status">
                                    @if (msg.IsRead)
                                    {
                                        <span class="text-primary">âœ“âœ“</span>
                                    }
                                    else
                                    {
                                        <span class="text-secondary">âœ“</span>
                                    }
                                </span>
                            }
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    
    <MessageInput OnSendMessage="SendMessage" OnTyping="OnTyping" OnStopTyping="OnStopTyping" />
</div>